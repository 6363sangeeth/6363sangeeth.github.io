<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hacked Screen - Fake Hacker Simulator</title>
    <style>
        @font-face {
            font-family: 'Audiowide';
            src: url('https://fonts.googleapis.com/css2?family=Audiowide&display=swap');
        }
        body {
            font-family: 'Audiowide', sans-serif;
            background-color: #000;
            color: #0f0;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            text-align: center;
            overflow: hidden;
        }
        .red-alert {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 0, 0, 0.5);
            z-index: -1;
            animation: blink 1s infinite;
        }
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0; }
        }
        .hacked-message {
            font-size: 2em;
            animation: fadeIn 2s, glitch 1s infinite, vibrate 0.1s infinite;
            position: relative;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes glitch {
            0% { transform: translate(0); }
            20% { transform: translate(-2px, 2px); }
            40% { transform: translate(-2px, -2px); }
            60% { transform: translate(2px, 2px); }
            80% { transform: translate(2px, -2px); }
            100% { transform: translate(0); }
        }
        @keyframes vibrate {
            0% { transform: translate(0); }
            20% { transform: translate(-1px, 1px); }
            40% { transform: translate(-1px, -1px); }
            60% { transform: translate(1px, 1px); }
            80% { transform: translate(1px, -1px); }
            100% { transform: translate(0); }
        }
        .countdown {
            font-size: 1.5em;
            margin-top: 20px;
            animation: fadeIn 2s;
        }
        .button {
            background-color: #0f0;
            color: #000;
            border: none;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 10px 2px;
            cursor: pointer;
            transition: background-color 0.3s;
            animation: fadeIn 2s;
        }
        .button:hover {
            background-color: #0c0;
        }
        .glitch {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('glitch.png') repeat;
            opacity: 0.2;
            pointer-events: none;
            animation: glitchEffect 1s infinite;
        }
        @keyframes glitchEffect {
            0% { transform: translate(0); }
            20% { transform: translate(-10px, 10px); }
            40% { transform: translate(-10px, -10px); }
            60% { transform: translate(10px, 10px); }
            80% { transform: translate(10px, -10px); }
            100% { transform: translate(0); }
        }
        canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -2;
        }
    </style>
</head>
<body>
    <canvas id="matrixRain"></canvas>
    <div class="red-alert"></div>
    <div class="glitch"></div>
    <div class="hacked-message">
        <p>SYSTEM HACKED</p>
        <p class="countdown" id="countdown">3</p>
        <button class="button" onclick="window.location.reload();">Restart</button>
    </div>
    <audio id="alertSound" src="alert.mp3" preload="auto"></audio>
    <script>
        let countdownElement = document.getElementById('countdown');
        let countdown = 3;
        let audioContext = new (window.AudioContext || window.webkitAudioContext)();
        let oscillator;
        setInterval(() => {
            if (countdown > 0) {
                countdown--;
                countdownElement.textContent = countdown;
            } else {
                alert('Your system is compromised!');
                playVibrationSound();
                playAlertSound();
                openNewTab();
            }
        }, 1000);

        function playVibrationSound() {
            oscillator = audioContext.createOscillator();
            oscillator.type = 'square';
            oscillator.frequency.setValueAtTime(100, audioContext.currentTime); // value in hertz
            oscillator.connect(audioContext.destination);
            oscillator.start();
            setTimeout(() => {
                oscillator.stop();
            }, 1000); // play for 1 second
        }

        function playAlertSound() {
            const alertSound = document.getElementById('alertSound');
            alertSound.play();
        }

        function openNewTab() {
            window.open(window.location.href, '_blank');
            window.location.reload();
        }

        // Matrix Rain Effect
        const canvas = document.getElementById('matrixRain');
        const ctx = canvas.getContext('2d');

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const letters = 'ABCDEFGHIJKLMNOPQRSTUVWX1234567890!@#$%^&*()!@#$%^&*(YZ0123456789';
        const fontSize = 16;
        const columns = canvas.width / fontSize;

        const drops = Array.from({ length: columns }).fill(1);

        function draw() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            ctx.fillStyle = '#0f0';
            ctx.font = `${fontSize}px monospace`;

            drops.forEach((y, index) => {
                const text = letters.charAt(Math.floor(Math.random() * letters.length));
                const x = index * fontSize;
                ctx.fillText(text, x, y * fontSize);

                if (y * fontSize > canvas.height && Math.random() > 0.975) {
                    drops[index] = 0;
                }

                drops[index]++;
            });
        }

        setInterval(draw, 33);
    </script>
</body>
</html>
